---
/* Layout - Astro */
import Layout from "@/layouts/Layout.astro";

/* Title - TypeScript */
import {
  titleNews_01,
  formateTitle_01,
  formateDate_01,
} from "@/pages/2023/11/07/title";

/* CSS Global - TailWindCSS */
import "@/css/style.css";

/* Components - Vue */
import MarkText from "@/components/Text/MarkText.vue";
import ExampleText from "@/components/Text/ExampleText.vue";
import CodeText from "@/components/Text/CodeText.vue";

/* Codes - Markdown */
import Code01 from "./Codes/code01.md";
import Code02 from "./Codes/code02.md";
import Code03 from "./Codes/code03.md";
import Code04 from "./Codes/code04.md";
import Code05 from "./Codes/code05.md";

export function getStaticPaths() {
  formateTitle_01;
  return [{ params: { title: formateTitle_01 } }];
}
---

<Layout title={titleNews_01}>
  <div class="container mx-auto mb-8 max-w-screen-lg rounded-lg bg-white p-8">
    <header class="flex flex-col gap-10 pb-10">
      <h2 class="text-sm font-medium text-[#4141b1]">
        Publicado em {formateDate_01()}
      </h2>
      <h1 class="font-title text-center text-3xl font-semibold">
        {titleNews_01}
      </h1>
    </header>

    <section class="flex flex-col gap-4 hyphens-auto break-words leading-loose">
      <p>
        Esse é um tutorial que funciona no <MarkText>VueJS (v3.3.8)</MarkText> em
        conjunto com o <MarkText>Vite mais recente (v4.5.0)</MarkText>
      </p>

      <p>
        É sempre importante lembrar que você pode configurar corretamente o seu
        projeto para que facilite certos tipos de ação aumentando a sua
        produtividade, e um desses tipos de configuração é como podemos melhorar
        métodos de <MarkText>chamar pastas / arquivos / imagens</MarkText> dentro
        de um projeto de forma eficiente e sem se preocupar muito com os subdiretórios,
        tudo isso através do <MarkText>path alias (@)</MarkText>
      </p>

      <p>
        Geralmente chamamos as pastas por caminhos através de pontinhos e barras
        <MarkText>(navegação por pastas)</MarkText>, por exemplo

        <Code01 />

        (lembrando o sistema de pesquisa do terminal Linux ou do Windows) mas se
        preferir, poderá substituir os pontos pelo prefixo @ "arroba" por
        exemplo

        <Code02 />
      </p>

      <p>
        <ExampleText>Exemplo de código com a navegação por pastas:</ExampleText>

        <Code03 />
      </p>

      <p>
        <ExampleText>Exemplo de código utilizando o path alias @:</ExampleText>

        <Code04 />
      </p>

      <p>
        Geralmente após o processo de instalação de um novo projeto VueJS esse
        tipo de <MarkText>atalho</MarkText> já é adicionado e configurado automaticamente
        em seu projeto, mas em caso de dúvidas, acesse o arquivo <CodeText>
          vite.config.ts
        </CodeText> ou
        <CodeText>vite.config.js</CodeText> e verifique se irá aparecer semelhante
        a esse código abaixo:
      </p>

      <Code05 />

      <p>
        O <MarkText>atalho @</MarkText> é configurado para apontar para o diretório
        <MarkText>src</MarkText> do seu projeto. Isso é feito usando a função <CodeText
        >
          fileURLToPath
        </CodeText> e
        <CodeText>new URL</CodeText> do
        <MarkText>Node.js</MarkText>
        para criar um caminho absoluto para o diretório <MarkText>
          src
        </MarkText>, ou seja, você poderá indicar em qualquer pasta que esteja
        dentro da <MarkText>pasta-mãe src</MarkText>
      </p>
    </section>
  </div>
</Layout>
