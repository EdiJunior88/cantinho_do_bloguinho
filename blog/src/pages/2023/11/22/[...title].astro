---
/* Layout - Astro */
import Layout from "@/layouts/Layout.astro";

/* Title - TypeScript */
import {
  titleNews_03,
  formateTitle_03,
  formateDate_03,
} from "@/pages/2023/11/22/title";

/* CSS Global - TailWindCSS */
import "@/css/style.css";

/* Components - Vue */
import MarkText from "@/components/Text/MarkText.vue";
import ExampleText from "@/components/Text/ExampleText.vue";
import CodeText from "@/components/Text/CodeText.vue";

/* Codes - Markdown */
import Code01 from "./Codes/code01.md";
import Code02 from "./Codes/code02.md";

export function getStaticPaths() {
  formateTitle_03;
  return [{ params: { title: formateTitle_03 } }];
}
---

<Layout title={titleNews_03}>
  <div class="container mx-auto max-w-screen-lg rounded-lg bg-white p-8">
    <header class="flex flex-col gap-10 pb-10">
      <h2 class="text-sm font-medium text-[#4141b1]">
        Publicado em {formateDate_03()}
      </h2>
      <h1 class="font-title text-center text-3xl font-semibold">
        {titleNews_03}
      </h1>
    </header>

    <section class="flex flex-col gap-4 hyphens-auto break-words leading-loose">
      <p>
        Esse √© um tutorial que funciona no <MarkText>NextJS (v14.0.3)</MarkText>
      </p>

      <p>
        Como sempre quem √© do front-end tem a incr√≠vel miss√£o de brigar
        diariamente com a responsividade das imagens e um dos grandes problemas
        √© deix√°-la com a propor√ß√£o original (nem muito esticada e t√£o pouco
        muito amassada).
      </p>

      <p>
        A vantagem do <MarkText>NextJS</MarkText> √© ter uma otimiza√ß√£o da imagem
        sem "estragar" a beleza da mesma, por isso √© muito comum utilizarmos o componente
        <CodeText>&lt;Image /&gt;</CodeText> que possui algumas propriedades:
      </p>

      <Code01 />

      <p>
        <ul>
          <ExampleText
            >Principais caracter√≠sticas do componente Image:</ExampleText
          >
          <li>
            üìå <CodeText>src</CodeText>: especifica o caminho da imagem a ser
            exibida. No exemplo, a vari√°vel <MarkText>profilePic</MarkText> √© usada
            para fornecer o caminho da imagem.
          </li>
          <li>
            üìå <CodeText>alt</CodeText>: define o texto alternativo que ser√°
            exibido caso a imagem n√£o possa ser carregada.
          </li>
          <li>
            üìå <CodeText>width</CodeText> e height: s√£o fornecidos automaticamente
            e definem as dimens√µes da imagem. No exemplo, o valor <MarkText>
              500
            </MarkText> √© usado para ambos.
          </li>
          <li>
            üìå <CodeText>blurDataURL</CodeText>: fornece uma URL de dados
            emba√ßados para ser exibida enquanto a imagem √© carregada. Essa
            propriedade √© fornecida automaticamente..
          </li>
          <li>
            üìå <CodeText>placeholder</CodeText>: define o estilo de desfoque que
            ser√° exibido enquanto a imagem √© carregada. Neste exemplo, a op√ß√£o <MarkText
            >
              blur
            </MarkText> √© usada.
          </li>
        </ul>
      </p>

      <p>
        Agora vamos ao que interessa, para deixar a imagem sempre responsiva e
        com o tamanho correto, basta adicionar a propriedade <CodeText>
          sizes="100vw"
        </CodeText> e tamb√©m um estilo inline <MarkText>style</MarkText> com o <CodeText
        >
          width: '100%'
        </CodeText> e <CodeText>height: 'auto'</CodeText> igual ao c√≥digo a seguir:
      </p>

      <Code02 />

      <p>
        Se de repente a imagem √© grande demais ou ent√£o n√£o tem os lados,
        alturas iguais e voc√™ queira modific√°-la para deixar responsiva, √© s√≥
        mudar as especifica√ß√µes no <MarkText>style</MarkText> deixando o <CodeText
        >
          width: 'auto'
        </CodeText> e modificando a altura <MarkText>(height)</MarkText>
      </p>
    </section>
  </div>
</Layout>
